{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-client",
  "type": "registry:hook",
  "files": [
    {
      "path": "registry/hooks/use-client.tsx",
      "content": "\"use client\"\n\nimport { useRef, useState } from \"react\";\n\ninterface ClientResponse {\n    data: any,\n    status: boolean | number\n}\n\ninterface CallApiProps {\n    url: string\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE'\n    payload?: any\n    query?: any,\n    multipart?: boolean\n    refresh?: boolean\n    showError?: boolean\n}\n\nexport const useClient = () => {\n    const [error, setError] = useState<any>();\n    const [loading, setLoading] = useState(false);\n    const [refreshing, setRefreshing] = useState(false);\n    const controllerRef = useRef(new AbortController());\n\n    const cancel = () => {\n        controllerRef.current.abort();\n    };\n\n    const callApi = async ({\n        url = \"\",\n        method = \"GET\",\n        payload = undefined,\n        multipart = false,\n        refresh = false,\n        query = undefined,\n        showError = true,\n    }: CallApiProps): Promise<ClientResponse> => {\n        setLoading(true);\n        if (refresh) setRefreshing(true)\n\n        let fullURL = url\n        const queryString = new URLSearchParams(query).toString()\n        const headers = {\n            'Content-Type': multipart ? 'multipart/form-data' : 'application/json',\n        };\n        const fetchOptions = {\n            method,\n            headers,\n            body: multipart ? payload : JSON.stringify(payload),\n        };\n        if (query) {\n            fullURL = `${url}?${queryString}`\n        }\n        try {\n            const response = await fetch(fullURL, fetchOptions);\n            const result = await response.json();\n            if (!response.ok) {\n                if (showError) {\n                    console.log('[!response.ok] error:', error, url, error?.message);\n                }\n            }\n            return { data: result, status: response.status };\n        } catch (error: any) {\n            console.log('[Fetch] error:', error, url, error?.message);\n            setError(error?.toString());\n            return { status: 500, data: error };\n        } finally {\n            setLoading(false);\n            if (refresh) setRefreshing(false)\n        }\n    };\n\n    return { cancel, error, loading, refreshing, callApi };\n};",
      "type": "registry:hook"
    }
  ]
}
