{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-debounce-callback",
  "type": "registry:hook",
  "dependencies": ["lodash.debounce"],
  "devDependencies": ["@types/lodash.debounce"],
  "registryDependencies": ["https://hookcn.ouassim.tech/r/use-unmount"],
  "files": [
    {
      "path": "registry/hooks/use-debounce-callback.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport debounce from \"lodash.debounce\"\n\nimport { useUnmount } from \"@/registry/hooks/use-unmount\"\n\ntype DebounceOptions = {\n  leading?: boolean\n  trailing?: boolean\n  maxWait?: number\n}\n\ntype ControlFunctions = {\n  cancel: () => void\n  flush: () => void\n  isPending: () => boolean\n}\n\nexport type DebouncedState<T extends (...args: any) => ReturnType<T>> = ((\n  ...args: Parameters<T>\n) => ReturnType<T> | undefined) &\n  ControlFunctions\n\nexport function useDebounceCallback<T extends (...args: any) => ReturnType<T>>(\n  func: T,\n  delay = 500,\n  options?: DebounceOptions\n): DebouncedState<T> {\n  const debouncedFunc = React.useRef<ReturnType<typeof debounce>>(null)\n\n  useUnmount(() => {\n    if (debouncedFunc.current) {\n      debouncedFunc.current.cancel()\n    }\n  })\n\n  const debounced = React.useMemo(() => {\n    const debouncedFuncInstance = debounce(func, delay, options)\n\n    const wrappedFunc: DebouncedState<T> = (...args: Parameters<T>) => {\n      return debouncedFuncInstance(...args)\n    }\n\n    wrappedFunc.cancel = () => {\n      debouncedFuncInstance.cancel()\n    }\n\n    wrappedFunc.isPending = () => {\n      return !!debouncedFunc.current\n    }\n\n    wrappedFunc.flush = () => {\n      return debouncedFuncInstance.flush()\n    }\n\n    return wrappedFunc\n  }, [func, delay, options])\n\n  React.useEffect(() => {\n    debouncedFunc.current = debounce(func, delay, options)\n  }, [func, delay, options])\n\n  return debounced\n}\n",
      "type": "registry:hook"
    }
  ]
}
