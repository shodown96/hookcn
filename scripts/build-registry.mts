import { promises as fs } from "fs"
import path from "path"
import { rimraf } from "rimraf"

import { registry } from "../registry"
import { Registry, registrySchema } from "../registry/schema"

async function buildRegistry(registry: Registry) {
  let index = `/* eslint-disable */
//
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`

  for (const item of registry) {
    const resolveFiles = item.files?.map(
      (file) => `registry/${typeof file === "string" ? file : file.path}`
    )
    if (!resolveFiles) {
      continue
    }

    const type = item.type.split(":")[1]
    const sourceFilename = ""

    let hookPath = `@/registry/${type}/${item.name}`

    if (item.files) {
      const files = item.files.map((file) =>
        typeof file === "string" ? { type: "registry:page", path: file } : file
      )
      if (files?.length) {
        hookPath = `@/registry/${files[0].path}`
      }
    }

    index += `
  "${item.name}": {
    name: "${item.name}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `registry/${typeof file === "string" ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    })}],
    component: React.lazy(() => import("${hookPath}")),
    source: "${sourceFilename}",
  },`
  }

  index += `
}
`

  rimraf.sync(path.join(process.cwd(), "__registry__/index.tsx"))
  await fs.writeFile(path.join(process.cwd(), "__registry__/index.tsx"), index)
}

try {
  console.info("ðŸ’½ Building registry...")
  const result = registrySchema.safeParse(registry)

  if (!result.success) {
    console.error(result.error)
    process.exit(1)
  }

  await buildRegistry(result.data)

  console.info("âœ… Done!")
} catch (error) {
  console.error(error)
  process.exit(1)
}
